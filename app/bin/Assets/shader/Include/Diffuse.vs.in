#ifndef SKINNED_MESH
    #define SKINNED_MESH 0
#endif

#ifndef CAST_SHADOW
    #define CAST_SHADOW 0
#endif

#ifndef RECIEVE_SHADOW
    #define RECIEVE_SHADOW 0
#endif

UniformBuffer(0, 0) uniform UniformBuffer00
{
	mat4 u_view_matrix;
	mat4 u_projection_matrix;

#if (CAST_SHADOW == 0)
    vec4 u_uv_scale_offset;

    #if (RECIEVE_SHADOW == 1)
        mat4 u_light_view_projection_matrix;
    #endif
#endif
} buf_0_0;

#if (SKINNED_MESH == 1)
    #define BONE_VECTOR_MAX 210

    UniformBuffer(1, 0) uniform UniformBuffer10
    {
	    vec4 u_bones[BONE_VECTOR_MAX];
    } buf_1_0;

    Input(6) vec4 a_bone_weights;
    Input(7) vec4 a_bone_indices;
#else
    UniformBuffer(1, 0) uniform UniformBuffer10
    {
	    mat4 u_model_matrix;
    } buf_1_0;
#endif

Input(0) vec4 a_pos;

#if (CAST_SHADOW == 0)
	Input(2) vec2 a_uv;
	Input(4) vec3 a_normal;

	Output(0) vec2 v_uv;
	Output(1) vec3 v_normal;

    #if (RECIEVE_SHADOW == 1)
        Output(2) vec4 v_pos_light_proj;
    #endif
#endif

void main()
{
#if (SKINNED_MESH == 1)
    mat4 model_mat;
    SKIN_MAT(model_mat, a_bone_weights, a_bone_indices, buf_1_0.u_bones);
#else
    mat4 model_mat = buf_1_0.u_model_matrix;
#endif

	gl_Position = a_pos * model_mat * buf_0_0.u_view_matrix * buf_0_0.u_projection_matrix;

#if (CAST_SHADOW == 0)
	v_uv = a_uv * buf_0_0.u_uv_scale_offset.xy + buf_0_0.u_uv_scale_offset.zw;
    v_normal = normalize((vec4(a_normal, 0) * model_mat).xyz);

    #if (RECIEVE_SHADOW == 1)
        v_pos_light_proj = a_pos * model_mat * buf_0_0.u_light_view_projection_matrix;
    #endif
#endif
	
    vulkan_convert();
}
